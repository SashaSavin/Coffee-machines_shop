
Бэкэнд

1. Python 2.7 или 3.+
2. Django Framework
3. Шаблонизатор jinja2

Фронтэнд

1. html-верстка - bootstrap
2. формы/интерфейс – vue.js
3. валидация форм - ajax

____________________________________________________________________________________________

Подготовить простую систему сопровождения заказов.

____________________________________________________________________________________________

Бэк:


1) 

Сущности:

Пользователь

- тип (менеджер, клиент)
- остальные поля стандартные

Товар

- картинка(и) можно
- описание
- наименование
- цена

Заказ

- список товаров
- клиент
- автор
- номер
- сумма заказа
- комментарии по заказу
- статус заказа (новый, подготовка кп, кп, заказ)
- дата/время создания заказа (автозаполнение при создании)
- дата/время изменения заказа (автозаполнение при изменении)

Комментарий

- заказ
- автор
- текст


2) Подготовка данных

Скрипт наполнения каталога, 

который вычитывает данные с любого новостного сайта или сайта каталога (tut.by, onliner.by и.т.п.) названия, картинки, описания, цены можно рандомно. 
Формат любой html, rss, json. 30-50 позиций - достаточно.
Если rss, то парсить не через готовый rss-парсер, а как xml.



3) Статусы заказа

Статусы(упр.):
Оплачено, неоплачено, готов к доставке.

______________________________________________________________________________________________________________


Фронт:

1) Страница списка заказов (одинаковая и для клиента, и для менеджера)

 Таблица с колонками
- номер п/п
- номер заказа
- клиент
- менеджер
- статус заказа 
- сумма заказа

 Фильтрация таблицы по полям 
- номер заказа

- клиент

- менеджер

- статус заказа

- сумма от-до

- даты с-по (внедрить календарики)


Кнопка "Создать заказ"

2) Страница заказа

1. Кнопки управления статусами

2. Поля заказа (номер заказа, сумма, клиент, менеджер, статус заказа, автор, дата/время создания, дата/время изменения)

3. Список товарных позиций 
(любым образом реализовать возможность выбора товарных позиций). 
После выбора отображать фото и информация по товарной позиции.!!!
__________________________________________


Управление пользователями

1. пользователи заводятся через админку - администратором, там-же назначается их тип.

2. перед началом работы пользователь авторизуется.

3. в админке возможность группе пользователей поменять тип.

4. доступ только к разрешенным данным к урл.


___________________________________________

Доп. задача:

Разобраться, что такое web socket(краткий конспект)
	-способ общения клиента браузера и сервера без постоянных запросов как в http.



Разобратсья, что такое FastAPI(краткий конспект)


1) В списке заказов добавить возможность изменять статус

2) Если на одном компе изменить статус, он поменяется и на втором.

3) Сделать через web socket но не на либах django, а через fast API.
________________________________________________________
В конечном итоге сделать это на бизнес проекте, тренировочный проект взять за образец.


